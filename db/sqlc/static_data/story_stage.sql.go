// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: story_stage.sql

package db_static_data

import (
	"context"
)

const getStoryStageByEnumId = `-- name: GetStoryStageByEnumId :one
SELECT id, enum_id, stage_index, deck, abyss, reward, created_at FROM story_stage WHERE enum_id = ?
`

func (q *Queries) GetStoryStageByEnumId(ctx context.Context, enumID string) (StoryStage, error) {
	row := q.db.QueryRowContext(ctx, getStoryStageByEnumId, enumID)
	var i StoryStage
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.StageIndex,
		&i.Deck,
		&i.Abyss,
		&i.Reward,
		&i.CreatedAt,
	)
	return i, err
}

const getStoryStages = `-- name: GetStoryStages :many
SELECT id, enum_id, stage_index, deck, abyss, reward, created_at FROM story_stage
`

func (q *Queries) GetStoryStages(ctx context.Context) ([]StoryStage, error) {
	rows, err := q.db.QueryContext(ctx, getStoryStages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StoryStage{}
	for rows.Next() {
		var i StoryStage
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.StageIndex,
			&i.Deck,
			&i.Abyss,
			&i.Reward,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

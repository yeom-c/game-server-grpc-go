// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: start.sql

package db_static_data

import (
	"context"
)

const getStartByEnumId = `-- name: GetStartByEnumId :one
SELECT id, enum_id, ce_common_type, reward_id, value, created_at FROM start WHERE enum_id = ?
`

func (q *Queries) GetStartByEnumId(ctx context.Context, enumID string) (Start, error) {
	row := q.db.QueryRowContext(ctx, getStartByEnumId, enumID)
	var i Start
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.CeCommonType,
		&i.RewardID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const getStarts = `-- name: GetStarts :many
SELECT id, enum_id, ce_common_type, reward_id, value, created_at FROM ` + "`" + `start` + "`" + `
`

func (q *Queries) GetStarts(ctx context.Context) ([]Start, error) {
	rows, err := q.db.QueryContext(ctx, getStarts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Start{}
	for rows.Next() {
		var i Start
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.CeCommonType,
			&i.RewardID,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

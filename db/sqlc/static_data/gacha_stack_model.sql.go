// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: gacha_stack_model.sql

package db_static_data

import (
	"context"
)

const getGachaStackModelByEnumId = `-- name: GetGachaStackModelByEnumId :one
SELECT id, enum_id, a_prob_correction, stack_correction_start, stack_correction_end, stack_100, created_at FROM ` + "`" + `gacha_stack_model` + "`" + ` WHERE enum_id = ?
`

func (q *Queries) GetGachaStackModelByEnumId(ctx context.Context, enumID string) (GachaStackModel, error) {
	row := q.db.QueryRowContext(ctx, getGachaStackModelByEnumId, enumID)
	var i GachaStackModel
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.AProbCorrection,
		&i.StackCorrectionStart,
		&i.StackCorrectionEnd,
		&i.Stack100,
		&i.CreatedAt,
	)
	return i, err
}

const getGachaStackModelList = `-- name: GetGachaStackModelList :many
SELECT id, enum_id, a_prob_correction, stack_correction_start, stack_correction_end, stack_100, created_at FROM ` + "`" + `gacha_stack_model` + "`" + `
`

func (q *Queries) GetGachaStackModelList(ctx context.Context) ([]GachaStackModel, error) {
	rows, err := q.db.QueryContext(ctx, getGachaStackModelList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GachaStackModel{}
	for rows.Next() {
		var i GachaStackModel
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.AProbCorrection,
			&i.StackCorrectionStart,
			&i.StackCorrectionEnd,
			&i.Stack100,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

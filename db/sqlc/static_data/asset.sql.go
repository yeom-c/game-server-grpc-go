// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: asset.sql

package db_static_data

import (
	"context"
)

const getAssetByEnumId = `-- name: GetAssetByEnumId :one
SELECT id, enum_id, ce_asset, ce_asset_grade, grade_resource_thumbnail, grade_resource, image_reference, pictogram_reference, grade_reference, image_tile, created_at FROM asset WHERE enum_id = ?
`

func (q *Queries) GetAssetByEnumId(ctx context.Context, enumID string) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAssetByEnumId, enumID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.CeAsset,
		&i.CeAssetGrade,
		&i.GradeResourceThumbnail,
		&i.GradeResource,
		&i.ImageReference,
		&i.PictogramReference,
		&i.GradeReference,
		&i.ImageTile,
		&i.CreatedAt,
	)
	return i, err
}

const getAssets = `-- name: GetAssets :many
SELECT id, enum_id, ce_asset, ce_asset_grade, grade_resource_thumbnail, grade_resource, image_reference, pictogram_reference, grade_reference, image_tile, created_at FROM asset
`

func (q *Queries) GetAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, getAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Asset{}
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.CeAsset,
			&i.CeAssetGrade,
			&i.GradeResourceThumbnail,
			&i.GradeResource,
			&i.ImageReference,
			&i.PictogramReference,
			&i.GradeReference,
			&i.ImageTile,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

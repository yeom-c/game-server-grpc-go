// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: stargem_resource.sql

package db_static_data

import (
	"context"
)

const getStargemResourceByEnumId = `-- name: GetStargemResourceByEnumId :one
SELECT id, enum_id, image, created_at FROM stargem_resource WHERE enum_id = ?
`

func (q *Queries) GetStargemResourceByEnumId(ctx context.Context, enumID string) (StargemResource, error) {
	row := q.db.QueryRowContext(ctx, getStargemResourceByEnumId, enumID)
	var i StargemResource
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.Image,
		&i.CreatedAt,
	)
	return i, err
}

const getStargemResources = `-- name: GetStargemResources :many
SELECT id, enum_id, image, created_at FROM stargem_resource
`

func (q *Queries) GetStargemResources(ctx context.Context) ([]StargemResource, error) {
	rows, err := q.db.QueryContext(ctx, getStargemResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StargemResource{}
	for rows.Next() {
		var i StargemResource
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.Image,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

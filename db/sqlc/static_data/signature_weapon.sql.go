// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: signature_weapon.sql

package db_static_data

import (
	"context"
)

const getSignatureWeaponByEnumId = `-- name: GetSignatureWeaponByEnumId :one
SELECT id, enum_id, base_atk, base_def, base_hp, ce_weapon_property, base_property, weapon_skill, weapon_growth_materials, weapon_level_stat, weapon_reference, created_at FROM signature_weapon WHERE enum_id = ?
`

func (q *Queries) GetSignatureWeaponByEnumId(ctx context.Context, enumID string) (SignatureWeapon, error) {
	row := q.db.QueryRowContext(ctx, getSignatureWeaponByEnumId, enumID)
	var i SignatureWeapon
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.BaseAtk,
		&i.BaseDef,
		&i.BaseHp,
		&i.CeWeaponProperty,
		&i.BaseProperty,
		&i.WeaponSkill,
		&i.WeaponGrowthMaterials,
		&i.WeaponLevelStat,
		&i.WeaponReference,
		&i.CreatedAt,
	)
	return i, err
}

const getSignatureWeapons = `-- name: GetSignatureWeapons :many
SELECT id, enum_id, base_atk, base_def, base_hp, ce_weapon_property, base_property, weapon_skill, weapon_growth_materials, weapon_level_stat, weapon_reference, created_at FROM signature_weapon
`

func (q *Queries) GetSignatureWeapons(ctx context.Context) ([]SignatureWeapon, error) {
	rows, err := q.db.QueryContext(ctx, getSignatureWeapons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SignatureWeapon{}
	for rows.Next() {
		var i SignatureWeapon
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.BaseAtk,
			&i.BaseDef,
			&i.BaseHp,
			&i.CeWeaponProperty,
			&i.BaseProperty,
			&i.WeaponSkill,
			&i.WeaponGrowthMaterials,
			&i.WeaponLevelStat,
			&i.WeaponReference,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

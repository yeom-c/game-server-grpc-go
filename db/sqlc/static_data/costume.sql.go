// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: costume.sql

package db_static_data

import (
	"context"
)

const getCostumeByEnumId = `-- name: GetCostumeByEnumId :one
SELECT id, enum_id, skin_name, ` + "`" + `character` + "`" + `, ce_costume_condition, condition_value, illust_reference, portrait_reference, voice_appear, created_at FROM ` + "`" + `costume` + "`" + ` WHERE enum_id = ?
`

func (q *Queries) GetCostumeByEnumId(ctx context.Context, enumID string) (Costume, error) {
	row := q.db.QueryRowContext(ctx, getCostumeByEnumId, enumID)
	var i Costume
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.SkinName,
		&i.Character,
		&i.CeCostumeCondition,
		&i.ConditionValue,
		&i.IllustReference,
		&i.PortraitReference,
		&i.VoiceAppear,
		&i.CreatedAt,
	)
	return i, err
}

const getCostumes = `-- name: GetCostumes :many
SELECT id, enum_id, skin_name, ` + "`" + `character` + "`" + `, ce_costume_condition, condition_value, illust_reference, portrait_reference, voice_appear, created_at FROM ` + "`" + `costume` + "`" + `
`

func (q *Queries) GetCostumes(ctx context.Context) ([]Costume, error) {
	rows, err := q.db.QueryContext(ctx, getCostumes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Costume{}
	for rows.Next() {
		var i Costume
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.SkinName,
			&i.Character,
			&i.CeCostumeCondition,
			&i.ConditionValue,
			&i.IllustReference,
			&i.PortraitReference,
			&i.VoiceAppear,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

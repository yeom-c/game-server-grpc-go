// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: gacha_class.sql

package db_static_data

import (
	"context"
)

const getGachaClassByEnumId = `-- name: GetGachaClassByEnumId :one
SELECT id, enum_id, prob, pool_group, created_at FROM ` + "`" + `gacha_class` + "`" + ` WHERE enum_id = ?
`

func (q *Queries) GetGachaClassByEnumId(ctx context.Context, enumID string) (GachaClass, error) {
	row := q.db.QueryRowContext(ctx, getGachaClassByEnumId, enumID)
	var i GachaClass
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.Prob,
		&i.PoolGroup,
		&i.CreatedAt,
	)
	return i, err
}

const getGachaClasses = `-- name: GetGachaClasses :many
SELECT id, enum_id, prob, pool_group, created_at FROM ` + "`" + `gacha_class` + "`" + `
`

func (q *Queries) GetGachaClasses(ctx context.Context) ([]GachaClass, error) {
	rows, err := q.db.QueryContext(ctx, getGachaClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GachaClass{}
	for rows.Next() {
		var i GachaClass
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.Prob,
			&i.PoolGroup,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: gacha.sql

package db_static_data

import (
	"context"
)

const getGachaByEnumId = `-- name: GetGachaByEnumId :one
SELECT id, enum_id, gacha_class, gacha_resource, slot_image, character_show, created_at FROM ` + "`" + `gacha` + "`" + ` WHERE enum_id = ?
`

func (q *Queries) GetGachaByEnumId(ctx context.Context, enumID string) (Gacha, error) {
	row := q.db.QueryRowContext(ctx, getGachaByEnumId, enumID)
	var i Gacha
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.GachaClass,
		&i.GachaResource,
		&i.SlotImage,
		&i.CharacterShow,
		&i.CreatedAt,
	)
	return i, err
}

const getGachas = `-- name: GetGachas :many
SELECT id, enum_id, gacha_class, gacha_resource, slot_image, character_show, created_at FROM ` + "`" + `gacha` + "`" + `
`

func (q *Queries) GetGachas(ctx context.Context) ([]Gacha, error) {
	rows, err := q.db.QueryContext(ctx, getGachas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Gacha{}
	for rows.Next() {
		var i Gacha
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.GachaClass,
			&i.GachaResource,
			&i.SlotImage,
			&i.CharacterShow,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account_growth.sql

package db_static_data

import (
	"context"
)

const getAccountGrowthByEnumId = `-- name: GetAccountGrowthByEnumId :one
SELECT id, enum_id, level, exp, exp_plus, created_at FROM account_growth WHERE enum_id = ?
`

func (q *Queries) GetAccountGrowthByEnumId(ctx context.Context, enumID string) (AccountGrowth, error) {
	row := q.db.QueryRowContext(ctx, getAccountGrowthByEnumId, enumID)
	var i AccountGrowth
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.Level,
		&i.Exp,
		&i.ExpPlus,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountGrowths = `-- name: GetAccountGrowths :many
SELECT id, enum_id, level, exp, exp_plus, created_at FROM account_growth
`

func (q *Queries) GetAccountGrowths(ctx context.Context) ([]AccountGrowth, error) {
	rows, err := q.db.QueryContext(ctx, getAccountGrowths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AccountGrowth{}
	for rows.Next() {
		var i AccountGrowth
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.Level,
			&i.Exp,
			&i.ExpPlus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: dialogue.sql

package db_static_data

import (
	"context"
)

const getDialogueByEnumId = `-- name: GetDialogueByEnumId :one
SELECT id, enum_id, dialogue_id, name, number, spotlight, ` + "`" + `character` + "`" + `, animation, highlighter, created_at FROM dialogue WHERE enum_id = ?
`

func (q *Queries) GetDialogueByEnumId(ctx context.Context, enumID string) (Dialogue, error) {
	row := q.db.QueryRowContext(ctx, getDialogueByEnumId, enumID)
	var i Dialogue
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.DialogueID,
		&i.Name,
		&i.Number,
		&i.Spotlight,
		&i.Character,
		&i.Animation,
		&i.Highlighter,
		&i.CreatedAt,
	)
	return i, err
}

const getDialogues = `-- name: GetDialogues :many
SELECT id, enum_id, dialogue_id, name, number, spotlight, ` + "`" + `character` + "`" + `, animation, highlighter, created_at FROM dialogue
`

func (q *Queries) GetDialogues(ctx context.Context) ([]Dialogue, error) {
	rows, err := q.db.QueryContext(ctx, getDialogues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dialogue{}
	for rows.Next() {
		var i Dialogue
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.DialogueID,
			&i.Name,
			&i.Number,
			&i.Spotlight,
			&i.Character,
			&i.Animation,
			&i.Highlighter,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

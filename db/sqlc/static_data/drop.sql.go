// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: drop.sql

package db_static_data

import (
	"context"
)

const getDropByEnumId = `-- name: GetDropByEnumId :one
SELECT id, enum_id, content_type, ce_common_type_drop, icon, ` + "`" + `drop` + "`" + `, rate, value, drop_next, created_at FROM ` + "`" + `drop` + "`" + ` WHERE enum_id = ?
`

func (q *Queries) GetDropByEnumId(ctx context.Context, enumID string) (Drop, error) {
	row := q.db.QueryRowContext(ctx, getDropByEnumId, enumID)
	var i Drop
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.ContentType,
		&i.CeCommonTypeDrop,
		&i.Icon,
		&i.Drop,
		&i.Rate,
		&i.Value,
		&i.DropNext,
		&i.CreatedAt,
	)
	return i, err
}

const getDrops = `-- name: GetDrops :many
SELECT id, enum_id, content_type, ce_common_type_drop, icon, ` + "`" + `drop` + "`" + `, rate, value, drop_next, created_at FROM ` + "`" + `drop` + "`" + `
`

func (q *Queries) GetDrops(ctx context.Context) ([]Drop, error) {
	rows, err := q.db.QueryContext(ctx, getDrops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Drop{}
	for rows.Next() {
		var i Drop
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.ContentType,
			&i.CeCommonTypeDrop,
			&i.Icon,
			&i.Drop,
			&i.Rate,
			&i.Value,
			&i.DropNext,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

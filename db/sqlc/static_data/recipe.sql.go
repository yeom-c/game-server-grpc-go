// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: recipe.sql

package db_static_data

import (
	"context"
)

const getRecipeByEnumId = `-- name: GetRecipeByEnumId :one
SELECT id, enum_id, ce_common_type_result, ce_craft_category, result, recipe_material, created_at FROM recipe WHERE enum_id = ?
`

func (q *Queries) GetRecipeByEnumId(ctx context.Context, enumID string) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByEnumId, enumID)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.CeCommonTypeResult,
		&i.CeCraftCategory,
		&i.Result,
		&i.RecipeMaterial,
		&i.CreatedAt,
	)
	return i, err
}

const getRecipes = `-- name: GetRecipes :many
SELECT id, enum_id, ce_common_type_result, ce_craft_category, result, recipe_material, created_at FROM recipe
`

func (q *Queries) GetRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.CeCommonTypeResult,
			&i.CeCraftCategory,
			&i.Result,
			&i.RecipeMaterial,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

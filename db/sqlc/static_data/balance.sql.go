// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: balance.sql

package db_static_data

import (
	"context"
)

const getBalanceByEnumId = `-- name: GetBalanceByEnumId :one
SELECT id, enum_id, content_type, fail_value, balance, rate, min_value, max_value, created_at FROM balance WHERE enum_id = ?
`

func (q *Queries) GetBalanceByEnumId(ctx context.Context, enumID string) (Balance, error) {
	row := q.db.QueryRowContext(ctx, getBalanceByEnumId, enumID)
	var i Balance
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.ContentType,
		&i.FailValue,
		&i.Balance,
		&i.Rate,
		&i.MinValue,
		&i.MaxValue,
		&i.CreatedAt,
	)
	return i, err
}

const getBalances = `-- name: GetBalances :many
SELECT id, enum_id, content_type, fail_value, balance, rate, min_value, max_value, created_at FROM balance
`

func (q *Queries) GetBalances(ctx context.Context) ([]Balance, error) {
	rows, err := q.db.QueryContext(ctx, getBalances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Balance{}
	for rows.Next() {
		var i Balance
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.ContentType,
			&i.FailValue,
			&i.Balance,
			&i.Rate,
			&i.MinValue,
			&i.MaxValue,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

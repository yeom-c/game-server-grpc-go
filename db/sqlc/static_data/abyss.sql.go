// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: abyss.sql

package db_static_data

import (
	"context"
)

const getAbyssByEnumId = `-- name: GetAbyssByEnumId :one
SELECT id, enum_id, level, map_file, size, size_x, size_y, rule, abyss_title_resource, boss, minor, elite, tower, time_limit, created_at FROM abyss WHERE enum_id = ?
`

func (q *Queries) GetAbyssByEnumId(ctx context.Context, enumID string) (Abyss, error) {
	row := q.db.QueryRowContext(ctx, getAbyssByEnumId, enumID)
	var i Abyss
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.Level,
		&i.MapFile,
		&i.Size,
		&i.SizeX,
		&i.SizeY,
		&i.Rule,
		&i.AbyssTitleResource,
		&i.Boss,
		&i.Minor,
		&i.Elite,
		&i.Tower,
		&i.TimeLimit,
		&i.CreatedAt,
	)
	return i, err
}

const getAbysses = `-- name: GetAbysses :many
SELECT id, enum_id, level, map_file, size, size_x, size_y, rule, abyss_title_resource, boss, minor, elite, tower, time_limit, created_at FROM abyss
`

func (q *Queries) GetAbysses(ctx context.Context) ([]Abyss, error) {
	rows, err := q.db.QueryContext(ctx, getAbysses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Abyss{}
	for rows.Next() {
		var i Abyss
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.Level,
			&i.MapFile,
			&i.Size,
			&i.SizeX,
			&i.SizeY,
			&i.Rule,
			&i.AbyssTitleResource,
			&i.Boss,
			&i.Minor,
			&i.Elite,
			&i.Tower,
			&i.TimeLimit,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

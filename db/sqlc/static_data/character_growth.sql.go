// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: character_growth.sql

package db_static_data

import (
	"context"
)

const getCharacterGrowthByEnumId = `-- name: GetCharacterGrowthByEnumId :one
SELECT id, enum_id, level, exp, exp_plus, created_at FROM character_growth WHERE enum_id = ?
`

func (q *Queries) GetCharacterGrowthByEnumId(ctx context.Context, enumID string) (CharacterGrowth, error) {
	row := q.db.QueryRowContext(ctx, getCharacterGrowthByEnumId, enumID)
	var i CharacterGrowth
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.Level,
		&i.Exp,
		&i.ExpPlus,
		&i.CreatedAt,
	)
	return i, err
}

const getCharacterGrowths = `-- name: GetCharacterGrowths :many
SELECT id, enum_id, level, exp, exp_plus, created_at FROM character_growth
`

func (q *Queries) GetCharacterGrowths(ctx context.Context) ([]CharacterGrowth, error) {
	rows, err := q.db.QueryContext(ctx, getCharacterGrowths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CharacterGrowth{}
	for rows.Next() {
		var i CharacterGrowth
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.Level,
			&i.Exp,
			&i.ExpPlus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

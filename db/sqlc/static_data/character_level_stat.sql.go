// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: character_level_stat.sql

package db_static_data

import (
	"context"
)

const getCharacterLevelStatByEnumId = `-- name: GetCharacterLevelStatByEnumId :one
SELECT id, enum_id, level_stat, created_at FROM character_level_stat WHERE enum_id = ?
`

func (q *Queries) GetCharacterLevelStatByEnumId(ctx context.Context, enumID string) (CharacterLevelStat, error) {
	row := q.db.QueryRowContext(ctx, getCharacterLevelStatByEnumId, enumID)
	var i CharacterLevelStat
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.LevelStat,
		&i.CreatedAt,
	)
	return i, err
}

const getCharacterLevelStats = `-- name: GetCharacterLevelStats :many
SELECT id, enum_id, level_stat, created_at FROM character_level_stat
`

func (q *Queries) GetCharacterLevelStats(ctx context.Context) ([]CharacterLevelStat, error) {
	rows, err := q.db.QueryContext(ctx, getCharacterLevelStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CharacterLevelStat{}
	for rows.Next() {
		var i CharacterLevelStat
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.LevelStat,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

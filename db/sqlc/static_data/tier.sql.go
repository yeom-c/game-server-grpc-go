// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: tier.sql

package db_static_data

import (
	"context"
)

const getTierByEnumId = `-- name: GetTierByEnumId :one
SELECT id, enum_id, icon_reference, rank_up_necessary, ai_pool, map_pool, viewers_final_min, viewers_final_max, win_point, win_reward, lose_point, lose_reward, created_at FROM tier WHERE enum_id = ?
`

func (q *Queries) GetTierByEnumId(ctx context.Context, enumID string) (Tier, error) {
	row := q.db.QueryRowContext(ctx, getTierByEnumId, enumID)
	var i Tier
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.IconReference,
		&i.RankUpNecessary,
		&i.AiPool,
		&i.MapPool,
		&i.ViewersFinalMin,
		&i.ViewersFinalMax,
		&i.WinPoint,
		&i.WinReward,
		&i.LosePoint,
		&i.LoseReward,
		&i.CreatedAt,
	)
	return i, err
}

const getTiers = `-- name: GetTiers :many
SELECT id, enum_id, icon_reference, rank_up_necessary, ai_pool, map_pool, viewers_final_min, viewers_final_max, win_point, win_reward, lose_point, lose_reward, created_at FROM tier
`

func (q *Queries) GetTiers(ctx context.Context) ([]Tier, error) {
	rows, err := q.db.QueryContext(ctx, getTiers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tier{}
	for rows.Next() {
		var i Tier
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.IconReference,
			&i.RankUpNecessary,
			&i.AiPool,
			&i.MapPool,
			&i.ViewersFinalMin,
			&i.ViewersFinalMax,
			&i.WinPoint,
			&i.WinReward,
			&i.LosePoint,
			&i.LoseReward,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

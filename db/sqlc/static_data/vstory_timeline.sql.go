// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: vstory_timeline.sql

package db_static_data

import (
	"context"
)

const getVstoryTimelineByEnumId = `-- name: GetVstoryTimelineByEnumId :one
SELECT id, enum_id, timeline_track, ce_story_type, optional_int, story_reward, banner_background, dialogue, production, created_at FROM vstory_timeline WHERE enum_id = ?
`

func (q *Queries) GetVstoryTimelineByEnumId(ctx context.Context, enumID string) (VstoryTimeline, error) {
	row := q.db.QueryRowContext(ctx, getVstoryTimelineByEnumId, enumID)
	var i VstoryTimeline
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.TimelineTrack,
		&i.CeStoryType,
		&i.OptionalInt,
		&i.StoryReward,
		&i.BannerBackground,
		&i.Dialogue,
		&i.Production,
		&i.CreatedAt,
	)
	return i, err
}

const getVstoryTimelines = `-- name: GetVstoryTimelines :many
SELECT id, enum_id, timeline_track, ce_story_type, optional_int, story_reward, banner_background, dialogue, production, created_at FROM vstory_timeline
`

func (q *Queries) GetVstoryTimelines(ctx context.Context) ([]VstoryTimeline, error) {
	rows, err := q.db.QueryContext(ctx, getVstoryTimelines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VstoryTimeline{}
	for rows.Next() {
		var i VstoryTimeline
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.TimelineTrack,
			&i.CeStoryType,
			&i.OptionalInt,
			&i.StoryReward,
			&i.BannerBackground,
			&i.Dialogue,
			&i.Production,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

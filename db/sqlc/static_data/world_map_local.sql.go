// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: world_map_local.sql

package db_static_data

import (
	"context"
)

const getWorldMapLocalByEnumId = `-- name: GetWorldMapLocalByEnumId :one
SELECT id, enum_id, kr, en, created_at FROM world_map_local WHERE enum_id = ?
`

func (q *Queries) GetWorldMapLocalByEnumId(ctx context.Context, enumID string) (WorldMapLocal, error) {
	row := q.db.QueryRowContext(ctx, getWorldMapLocalByEnumId, enumID)
	var i WorldMapLocal
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.Kr,
		&i.En,
		&i.CreatedAt,
	)
	return i, err
}

const getWorldMapLocals = `-- name: GetWorldMapLocals :many
SELECT id, enum_id, kr, en, created_at FROM world_map_local
`

func (q *Queries) GetWorldMapLocals(ctx context.Context) ([]WorldMapLocal, error) {
	rows, err := q.db.QueryContext(ctx, getWorldMapLocals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorldMapLocal{}
	for rows.Next() {
		var i WorldMapLocal
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.Kr,
			&i.En,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

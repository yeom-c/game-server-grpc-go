// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: fate_card.sql

package db_static_data

import (
	"context"
)

const getFateCardByEnumId = `-- name: GetFateCardByEnumId :one
SELECT id, enum_id, ce_fate_card_grade, card_trigger, card_effect, card_effect_value, card_effect_duration, main_grade_reference, slot_grade_reference, icon_reference, reward_grade_reference, image_reference, recipe, effect_reference, created_at FROM ` + "`" + `fate_card` + "`" + ` WHERE enum_id = ?
`

func (q *Queries) GetFateCardByEnumId(ctx context.Context, enumID string) (FateCard, error) {
	row := q.db.QueryRowContext(ctx, getFateCardByEnumId, enumID)
	var i FateCard
	err := row.Scan(
		&i.ID,
		&i.EnumID,
		&i.CeFateCardGrade,
		&i.CardTrigger,
		&i.CardEffect,
		&i.CardEffectValue,
		&i.CardEffectDuration,
		&i.MainGradeReference,
		&i.SlotGradeReference,
		&i.IconReference,
		&i.RewardGradeReference,
		&i.ImageReference,
		&i.Recipe,
		&i.EffectReference,
		&i.CreatedAt,
	)
	return i, err
}

const getFateCards = `-- name: GetFateCards :many
SELECT id, enum_id, ce_fate_card_grade, card_trigger, card_effect, card_effect_value, card_effect_duration, main_grade_reference, slot_grade_reference, icon_reference, reward_grade_reference, image_reference, recipe, effect_reference, created_at FROM ` + "`" + `fate_card` + "`" + `
`

func (q *Queries) GetFateCards(ctx context.Context) ([]FateCard, error) {
	rows, err := q.db.QueryContext(ctx, getFateCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FateCard{}
	for rows.Next() {
		var i FateCard
		if err := rows.Scan(
			&i.ID,
			&i.EnumID,
			&i.CeFateCardGrade,
			&i.CardTrigger,
			&i.CardEffect,
			&i.CardEffectValue,
			&i.CardEffectDuration,
			&i.MainGradeReference,
			&i.SlotGradeReference,
			&i.IconReference,
			&i.RewardGradeReference,
			&i.ImageReference,
			&i.Recipe,
			&i.EffectReference,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: mail.sql

package db_game

import (
	"context"
	"database/sql"
)

const createMail = `-- name: CreateMail :execresult
INSERT INTO mail (account_user_id, sender, ` + "`" + `type` + "`" + `, ` + "`" + `status` + "`" + `, delete_all, attachment, title, message, expired_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateMailParams struct {
	AccountUserID int32          `json:"account_user_id"`
	Sender        string         `json:"sender"`
	Type          int32          `json:"type"`
	Status        int32          `json:"status"`
	DeleteAll     int32          `json:"delete_all"`
	Attachment    sql.NullString `json:"attachment"`
	Title         string         `json:"title"`
	Message       sql.NullString `json:"message"`
	ExpiredAt     sql.NullTime   `json:"expired_at"`
}

func (q *Queries) CreateMail(ctx context.Context, arg CreateMailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMail,
		arg.AccountUserID,
		arg.Sender,
		arg.Type,
		arg.Status,
		arg.DeleteAll,
		arg.Attachment,
		arg.Title,
		arg.Message,
		arg.ExpiredAt,
	)
}

const deleteAllConfirmMail = `-- name: DeleteAllConfirmMail :execresult
DELETE FROM mail WHERE account_user_id = ? AND ` + "`" + `status` + "`" + ` = ? AND delete_all = ?
`

type DeleteAllConfirmMailParams struct {
	AccountUserID int32 `json:"account_user_id"`
	Status        int32 `json:"status"`
	DeleteAll     int32 `json:"delete_all"`
}

func (q *Queries) DeleteAllConfirmMail(ctx context.Context, arg DeleteAllConfirmMailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllConfirmMail, arg.AccountUserID, arg.Status, arg.DeleteAll)
}

const deleteAllExpiredMail = `-- name: DeleteAllExpiredMail :execresult
DELETE FROM mail WHERE account_user_id = ? AND expired_at IS NOT NULL AND expired_at < NOW()
`

func (q *Queries) DeleteAllExpiredMail(ctx context.Context, accountUserID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllExpiredMail, accountUserID)
}

const deleteConfirmMail = `-- name: DeleteConfirmMail :execresult
DELETE FROM mail WHERE account_user_id = ? AND id = ? AND ` + "`" + `status` + "`" + ` = ?
`

type DeleteConfirmMailParams struct {
	AccountUserID int32 `json:"account_user_id"`
	ID            int32 `json:"id"`
	Status        int32 `json:"status"`
}

func (q *Queries) DeleteConfirmMail(ctx context.Context, arg DeleteConfirmMailParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteConfirmMail, arg.AccountUserID, arg.ID, arg.Status)
}

const getMail = `-- name: GetMail :one
SELECT id, account_user_id, sender, type, status, delete_all, attachment, title, message, expired_at, created_at FROM mail WHERE id = ?
`

func (q *Queries) GetMail(ctx context.Context, id int32) (Mail, error) {
	row := q.db.QueryRowContext(ctx, getMail, id)
	var i Mail
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.Sender,
		&i.Type,
		&i.Status,
		&i.DeleteAll,
		&i.Attachment,
		&i.Title,
		&i.Message,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getMailListByAccountUserId = `-- name: GetMailListByAccountUserId :many
SELECT id, account_user_id, sender, type, status, delete_all, attachment, title, message, expired_at, created_at FROM mail WHERE account_user_id = ? ORDER BY ` + "`" + `status` + "`" + ` ASC, ` + "`" + `created_at` + "`" + ` DESC, id desc LIMIT ?
`

type GetMailListByAccountUserIdParams struct {
	AccountUserID int32 `json:"account_user_id"`
	Limit         int32 `json:"limit"`
}

func (q *Queries) GetMailListByAccountUserId(ctx context.Context, arg GetMailListByAccountUserIdParams) ([]Mail, error) {
	rows, err := q.db.QueryContext(ctx, getMailListByAccountUserId, arg.AccountUserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mail{}
	for rows.Next() {
		var i Mail
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.Sender,
			&i.Type,
			&i.Status,
			&i.DeleteAll,
			&i.Attachment,
			&i.Title,
			&i.Message,
			&i.ExpiredAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMailStatus = `-- name: UpdateMailStatus :execresult
UPDATE mail SET ` + "`" + `status` + "`" + ` = ? WHERE id = ?
`

type UpdateMailStatusParams struct {
	Status int32 `json:"status"`
	ID     int32 `json:"id"`
}

func (q *Queries) UpdateMailStatus(ctx context.Context, arg UpdateMailStatusParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateMailStatus, arg.Status, arg.ID)
}

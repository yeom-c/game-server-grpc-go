// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: gacha_log.sql

package db_game

import (
	"context"
	"database/sql"
)

const createGachaLog = `-- name: CreateGachaLog :execresult
INSERT INTO gacha_log (account_user_id, enum_id, character_enum_id) VALUES (?, ?, ?)
`

type CreateGachaLogParams struct {
	AccountUserID   int32  `json:"account_user_id"`
	EnumID          string `json:"enum_id"`
	CharacterEnumID string `json:"character_enum_id"`
}

func (q *Queries) CreateGachaLog(ctx context.Context, arg CreateGachaLogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGachaLog, arg.AccountUserID, arg.EnumID, arg.CharacterEnumID)
}

const getGachaLogCategoryListByAccountUserId = `-- name: GetGachaLogCategoryListByAccountUserId :many
SELECT enum_id FROM gacha_log where account_user_id = ? GROUP BY enum_id ORDER BY enum_id
`

func (q *Queries) GetGachaLogCategoryListByAccountUserId(ctx context.Context, accountUserID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getGachaLogCategoryListByAccountUserId, accountUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var enum_id string
		if err := rows.Scan(&enum_id); err != nil {
			return nil, err
		}
		items = append(items, enum_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGachaLogListByAccountUserId = `-- name: GetGachaLogListByAccountUserId :many
SELECT id, account_user_id, enum_id, character_enum_id, created_at FROM gacha_log WHERE account_user_id = ? ORDER BY created_at DESC, id DESC LIMIT ?, ?
`

type GetGachaLogListByAccountUserIdParams struct {
	AccountUserID int32 `json:"account_user_id"`
	Offset        int32 `json:"offset"`
	Limit         int32 `json:"limit"`
}

func (q *Queries) GetGachaLogListByAccountUserId(ctx context.Context, arg GetGachaLogListByAccountUserIdParams) ([]GachaLog, error) {
	rows, err := q.db.QueryContext(ctx, getGachaLogListByAccountUserId, arg.AccountUserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GachaLog{}
	for rows.Next() {
		var i GachaLog
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.EnumID,
			&i.CharacterEnumID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGachaLogListByEnumId = `-- name: GetGachaLogListByEnumId :many
SELECT id, account_user_id, enum_id, character_enum_id, created_at FROM gacha_log WHERE account_user_id = ? AND enum_id = ? ORDER BY created_at DESC, id DESC LIMIT ?, ?
`

type GetGachaLogListByEnumIdParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
	Offset        int32  `json:"offset"`
	Limit         int32  `json:"limit"`
}

func (q *Queries) GetGachaLogListByEnumId(ctx context.Context, arg GetGachaLogListByEnumIdParams) ([]GachaLog, error) {
	rows, err := q.db.QueryContext(ctx, getGachaLogListByEnumId,
		arg.AccountUserID,
		arg.EnumID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GachaLog{}
	for rows.Next() {
		var i GachaLog
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.EnumID,
			&i.CharacterEnumID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGachaLogListCountByAccountUserId = `-- name: GetGachaLogListCountByAccountUserId :one
SELECT COUNT(*) FROM gacha_log WHERE account_user_id = ?
`

func (q *Queries) GetGachaLogListCountByAccountUserId(ctx context.Context, accountUserID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getGachaLogListCountByAccountUserId, accountUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getGachaLogListCountByEnumId = `-- name: GetGachaLogListCountByEnumId :one
SELECT COUNT(*) FROM gacha_log WHERE account_user_id = ? AND enum_id = ?
`

type GetGachaLogListCountByEnumIdParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
}

func (q *Queries) GetGachaLogListCountByEnumId(ctx context.Context, arg GetGachaLogListCountByEnumIdParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getGachaLogListCountByEnumId, arg.AccountUserID, arg.EnumID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

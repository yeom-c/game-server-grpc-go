// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: fate_card.sql

package db_game

import (
	"context"
	"database/sql"
)

const createFateCard = `-- name: CreateFateCard :execresult
INSERT INTO fate_card (account_user_id, enum_id) VALUES (?, ?)
`

type CreateFateCardParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
}

func (q *Queries) CreateFateCard(ctx context.Context, arg CreateFateCardParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFateCard, arg.AccountUserID, arg.EnumID)
}

const getFateCard = `-- name: GetFateCard :one
SELECT id, account_user_id, enum_id, character_enum_id, created_at FROM fate_card WHERE id = ?
`

func (q *Queries) GetFateCard(ctx context.Context, id int32) (FateCard, error) {
	row := q.db.QueryRowContext(ctx, getFateCard, id)
	var i FateCard
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.CharacterEnumID,
		&i.CreatedAt,
	)
	return i, err
}

const getFateCardByCharacterEnumId = `-- name: GetFateCardByCharacterEnumId :one
SELECT id, account_user_id, enum_id, character_enum_id, created_at FROM fate_card WHERE account_user_id = ? AND character_enum_id = ? LIMIT 1
`

type GetFateCardByCharacterEnumIdParams struct {
	AccountUserID   int32          `json:"account_user_id"`
	CharacterEnumID sql.NullString `json:"character_enum_id"`
}

func (q *Queries) GetFateCardByCharacterEnumId(ctx context.Context, arg GetFateCardByCharacterEnumIdParams) (FateCard, error) {
	row := q.db.QueryRowContext(ctx, getFateCardByCharacterEnumId, arg.AccountUserID, arg.CharacterEnumID)
	var i FateCard
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.CharacterEnumID,
		&i.CreatedAt,
	)
	return i, err
}

const getFateCardByEnumId = `-- name: GetFateCardByEnumId :one
SELECT id, account_user_id, enum_id, character_enum_id, created_at FROM fate_card WHERE account_user_id = ? AND enum_id = ?
`

type GetFateCardByEnumIdParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
}

func (q *Queries) GetFateCardByEnumId(ctx context.Context, arg GetFateCardByEnumIdParams) (FateCard, error) {
	row := q.db.QueryRowContext(ctx, getFateCardByEnumId, arg.AccountUserID, arg.EnumID)
	var i FateCard
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.CharacterEnumID,
		&i.CreatedAt,
	)
	return i, err
}

const getFateCardListByAccountUserId = `-- name: GetFateCardListByAccountUserId :many
SELECT id, account_user_id, enum_id, character_enum_id, created_at FROM fate_card WHERE account_user_id = ?
`

func (q *Queries) GetFateCardListByAccountUserId(ctx context.Context, accountUserID int32) ([]FateCard, error) {
	rows, err := q.db.QueryContext(ctx, getFateCardListByAccountUserId, accountUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FateCard{}
	for rows.Next() {
		var i FateCard
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.EnumID,
			&i.CharacterEnumID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unequipFateCardByCharacterEnumId = `-- name: UnequipFateCardByCharacterEnumId :execresult
UPDATE fate_card SET character_enum_id = NULL WHERE account_user_id = ? AND character_enum_id = ?
`

type UnequipFateCardByCharacterEnumIdParams struct {
	AccountUserID   int32          `json:"account_user_id"`
	CharacterEnumID sql.NullString `json:"character_enum_id"`
}

func (q *Queries) UnequipFateCardByCharacterEnumId(ctx context.Context, arg UnequipFateCardByCharacterEnumIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, unequipFateCardByCharacterEnumId, arg.AccountUserID, arg.CharacterEnumID)
}

const updateFateCardCharacterEnumId = `-- name: UpdateFateCardCharacterEnumId :execresult
UPDATE fate_card SET character_enum_id = ? WHERE id = ?
`

type UpdateFateCardCharacterEnumIdParams struct {
	CharacterEnumID sql.NullString `json:"character_enum_id"`
	ID              int32          `json:"id"`
}

func (q *Queries) UpdateFateCardCharacterEnumId(ctx context.Context, arg UpdateFateCardCharacterEnumIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateFateCardCharacterEnumId, arg.CharacterEnumID, arg.ID)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: deck.sql

package db_game

import (
	"context"
	"database/sql"
)

const createDeck = `-- name: CreateDeck :execresult
INSERT INTO deck (account_user_id, ` + "`" + `index` + "`" + `, ` + "`" + `name` + "`" + `, character_id_0, character_id_1, character_id_2, character_id_3, character_id_4) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateDeckParams struct {
	AccountUserID int32         `json:"account_user_id"`
	Index         int32         `json:"index"`
	Name          string        `json:"name"`
	CharacterID0  sql.NullInt32 `json:"character_id_0"`
	CharacterID1  sql.NullInt32 `json:"character_id_1"`
	CharacterID2  sql.NullInt32 `json:"character_id_2"`
	CharacterID3  sql.NullInt32 `json:"character_id_3"`
	CharacterID4  sql.NullInt32 `json:"character_id_4"`
}

func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createDeck,
		arg.AccountUserID,
		arg.Index,
		arg.Name,
		arg.CharacterID0,
		arg.CharacterID1,
		arg.CharacterID2,
		arg.CharacterID3,
		arg.CharacterID4,
	)
}

const getDeck = `-- name: GetDeck :one
SELECT id, account_user_id, ` + "`" + `index` + "`" + `, name, character_id_0, character_id_1, character_id_2, character_id_3, character_id_4, created_at FROM deck WHERE id = ?
`

func (q *Queries) GetDeck(ctx context.Context, id int32) (Deck, error) {
	row := q.db.QueryRowContext(ctx, getDeck, id)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.Index,
		&i.Name,
		&i.CharacterID0,
		&i.CharacterID1,
		&i.CharacterID2,
		&i.CharacterID3,
		&i.CharacterID4,
		&i.CreatedAt,
	)
	return i, err
}

const getDeckCount = `-- name: GetDeckCount :one
SELECT COUNT(*) FROM deck WHERE account_user_id = ?
`

func (q *Queries) GetDeckCount(ctx context.Context, accountUserID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDeckCount, accountUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDeckListByAccountUserId = `-- name: GetDeckListByAccountUserId :many
SELECT id, account_user_id, ` + "`" + `index` + "`" + `, name, character_id_0, character_id_1, character_id_2, character_id_3, character_id_4, created_at FROM deck WHERE account_user_id = ?
`

func (q *Queries) GetDeckListByAccountUserId(ctx context.Context, accountUserID int32) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, getDeckListByAccountUserId, accountUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deck{}
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.Index,
			&i.Name,
			&i.CharacterID0,
			&i.CharacterID1,
			&i.CharacterID2,
			&i.CharacterID3,
			&i.CharacterID4,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeck = `-- name: UpdateDeck :execresult
UPDATE deck SET ` + "`" + `name` + "`" + `= ?, character_id_0 = ?, character_id_1 = ?, character_id_2 = ?, character_id_3 = ?, character_id_4 = ? WHERE id = ?
`

type UpdateDeckParams struct {
	Name         string        `json:"name"`
	CharacterID0 sql.NullInt32 `json:"character_id_0"`
	CharacterID1 sql.NullInt32 `json:"character_id_1"`
	CharacterID2 sql.NullInt32 `json:"character_id_2"`
	CharacterID3 sql.NullInt32 `json:"character_id_3"`
	CharacterID4 sql.NullInt32 `json:"character_id_4"`
	ID           int32         `json:"id"`
}

func (q *Queries) UpdateDeck(ctx context.Context, arg UpdateDeckParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateDeck,
		arg.Name,
		arg.CharacterID0,
		arg.CharacterID1,
		arg.CharacterID2,
		arg.CharacterID3,
		arg.CharacterID4,
		arg.ID,
	)
}

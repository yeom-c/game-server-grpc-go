// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: item.sql

package db_game

import (
	"context"
	"database/sql"
)

const addItemCount = `-- name: AddItemCount :execresult
UPDATE item SET ` + "`" + `count` + "`" + ` = ` + "`" + `count` + "`" + ` + ? WHERE id = ?
`

type AddItemCountParams struct {
	Amount int32 `json:"amount"`
	ID     int32 `json:"id"`
}

func (q *Queries) AddItemCount(ctx context.Context, arg AddItemCountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addItemCount, arg.Amount, arg.ID)
}

const getItem = `-- name: GetItem :one
SELECT id, account_user_id, enum_id, count, created_at FROM item WHERE id = ?
`

func (q *Queries) GetItem(ctx context.Context, id int32) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.Count,
		&i.CreatedAt,
	)
	return i, err
}

const getItemByEnumId = `-- name: GetItemByEnumId :one
SELECT id, account_user_id, enum_id, count, created_at FROM item WHERE account_user_id = ? and enum_id = ?
`

type GetItemByEnumIdParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
}

func (q *Queries) GetItemByEnumId(ctx context.Context, arg GetItemByEnumIdParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItemByEnumId, arg.AccountUserID, arg.EnumID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.Count,
		&i.CreatedAt,
	)
	return i, err
}

const getItemListByAccountUserId = `-- name: GetItemListByAccountUserId :many
SELECT id, account_user_id, enum_id, count, created_at FROM item WHERE account_user_id = ?
`

func (q *Queries) GetItemListByAccountUserId(ctx context.Context, accountUserID int32) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemListByAccountUserId, accountUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.EnumID,
			&i.Count,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertItem = `-- name: UpsertItem :execresult
INSERT INTO item (account_user_id, enum_id, ` + "`" + `count` + "`" + `) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE ` + "`" + `count` + "`" + ` = ` + "`" + `count` + "`" + ` + ?
`

type UpsertItemParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
	Count         int32  `json:"count"`
}

func (q *Queries) UpsertItem(ctx context.Context, arg UpsertItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertItem,
		arg.AccountUserID,
		arg.EnumID,
		arg.Count,
		arg.Count,
	)
}

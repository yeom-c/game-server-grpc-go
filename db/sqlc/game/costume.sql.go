// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: costume.sql

package db_game

import (
	"context"
	"database/sql"
)

const createCostume = `-- name: CreateCostume :execresult
INSERT IGNORE INTO costume (account_user_id, enum_id, character_enum_id, ` + "`" + `state` + "`" + `) VALUES (?, ?, ?, ?)
`

type CreateCostumeParams struct {
	AccountUserID   int32  `json:"account_user_id"`
	EnumID          string `json:"enum_id"`
	CharacterEnumID string `json:"character_enum_id"`
	State           int32  `json:"state"`
}

func (q *Queries) CreateCostume(ctx context.Context, arg CreateCostumeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCostume,
		arg.AccountUserID,
		arg.EnumID,
		arg.CharacterEnumID,
		arg.State,
	)
}

const getCostume = `-- name: GetCostume :one
SELECT id, account_user_id, enum_id, character_enum_id, state, created_at FROM costume WHERE id = ?
`

func (q *Queries) GetCostume(ctx context.Context, id int32) (Costume, error) {
	row := q.db.QueryRowContext(ctx, getCostume, id)
	var i Costume
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.CharacterEnumID,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getCostumeByEnumId = `-- name: GetCostumeByEnumId :one
SELECT id, account_user_id, enum_id, character_enum_id, state, created_at FROM costume WHERE account_user_id = ? AND enum_id = ?
`

type GetCostumeByEnumIdParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
}

func (q *Queries) GetCostumeByEnumId(ctx context.Context, arg GetCostumeByEnumIdParams) (Costume, error) {
	row := q.db.QueryRowContext(ctx, getCostumeByEnumId, arg.AccountUserID, arg.EnumID)
	var i Costume
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.CharacterEnumID,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getCostumeListByAccountUserId = `-- name: GetCostumeListByAccountUserId :many
SELECT id, account_user_id, enum_id, character_enum_id, state, created_at FROM costume WHERE account_user_id = ?
`

func (q *Queries) GetCostumeListByAccountUserId(ctx context.Context, accountUserID int32) ([]Costume, error) {
	rows, err := q.db.QueryContext(ctx, getCostumeListByAccountUserId, accountUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Costume{}
	for rows.Next() {
		var i Costume
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.EnumID,
			&i.CharacterEnumID,
			&i.State,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCostumeListByCharacterEnumId = `-- name: GetCostumeListByCharacterEnumId :many
SELECT id, account_user_id, enum_id, character_enum_id, state, created_at FROM costume WHERE account_user_id = ? AND character_enum_id = ?
`

type GetCostumeListByCharacterEnumIdParams struct {
	AccountUserID   int32  `json:"account_user_id"`
	CharacterEnumID string `json:"character_enum_id"`
}

func (q *Queries) GetCostumeListByCharacterEnumId(ctx context.Context, arg GetCostumeListByCharacterEnumIdParams) ([]Costume, error) {
	rows, err := q.db.QueryContext(ctx, getCostumeListByCharacterEnumId, arg.AccountUserID, arg.CharacterEnumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Costume{}
	for rows.Next() {
		var i Costume
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.EnumID,
			&i.CharacterEnumID,
			&i.State,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCostumeState = `-- name: UpdateCostumeState :execresult
UPDATE costume SET ` + "`" + `state` + "`" + ` = ? WHERE id = ?
`

type UpdateCostumeStateParams struct {
	State int32 `json:"state"`
	ID    int32 `json:"id"`
}

func (q *Queries) UpdateCostumeState(ctx context.Context, arg UpdateCostumeStateParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCostumeState, arg.State, arg.ID)
}

const updateCostumeStateByCharacterEnumId = `-- name: UpdateCostumeStateByCharacterEnumId :execresult
UPDATE costume SET ` + "`" + `state` + "`" + ` = ? WHERE account_user_id = ? AND character_enum_id = ?
`

type UpdateCostumeStateByCharacterEnumIdParams struct {
	State           int32  `json:"state"`
	AccountUserID   int32  `json:"account_user_id"`
	CharacterEnumID string `json:"character_enum_id"`
}

func (q *Queries) UpdateCostumeStateByCharacterEnumId(ctx context.Context, arg UpdateCostumeStateByCharacterEnumIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCostumeStateByCharacterEnumId, arg.State, arg.AccountUserID, arg.CharacterEnumID)
}

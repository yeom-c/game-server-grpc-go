// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: asset.sql

package db_game

import (
	"context"
	"database/sql"
)

const addAssetBalance = `-- name: AddAssetBalance :execresult
UPDATE asset SET balance = balance + ? WHERE id = ?
`

type AddAssetBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int32 `json:"id"`
}

func (q *Queries) AddAssetBalance(ctx context.Context, arg AddAssetBalanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addAssetBalance, arg.Amount, arg.ID)
}

const addAssetBalanceByEnumId = `-- name: AddAssetBalanceByEnumId :execresult
UPDATE asset SET balance = balance + ? WHERE account_user_id = ? AND enum_id = ?
`

type AddAssetBalanceByEnumIdParams struct {
	Amount        int64  `json:"amount"`
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
}

func (q *Queries) AddAssetBalanceByEnumId(ctx context.Context, arg AddAssetBalanceByEnumIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addAssetBalanceByEnumId, arg.Amount, arg.AccountUserID, arg.EnumID)
}

const addAssetBalanceByEnumType = `-- name: AddAssetBalanceByEnumType :execresult
UPDATE asset SET balance = balance + ? WHERE account_user_id = ? AND type = ?
`

type AddAssetBalanceByEnumTypeParams struct {
	Amount        int64 `json:"amount"`
	AccountUserID int32 `json:"account_user_id"`
	Type          int32 `json:"type"`
}

func (q *Queries) AddAssetBalanceByEnumType(ctx context.Context, arg AddAssetBalanceByEnumTypeParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addAssetBalanceByEnumType, arg.Amount, arg.AccountUserID, arg.Type)
}

const getAssetByEnumId = `-- name: GetAssetByEnumId :one
SELECT id, account_user_id, enum_id, type, balance FROM asset WHERE account_user_id = ? AND enum_id = ?
`

type GetAssetByEnumIdParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
}

func (q *Queries) GetAssetByEnumId(ctx context.Context, arg GetAssetByEnumIdParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, getAssetByEnumId, arg.AccountUserID, arg.EnumID)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.EnumID,
		&i.Type,
		&i.Balance,
	)
	return i, err
}

const getAssetListByAccountUserId = `-- name: GetAssetListByAccountUserId :many
SELECT id, account_user_id, enum_id, type, balance FROM asset WHERE account_user_id = ?
`

func (q *Queries) GetAssetListByAccountUserId(ctx context.Context, accountUserID int32) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, getAssetListByAccountUserId, accountUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Asset{}
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.EnumID,
			&i.Type,
			&i.Balance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertAsset = `-- name: UpsertAsset :execresult
INSERT INTO asset (account_user_id, enum_id, type, balance) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE balance = balance + ?
`

type UpsertAssetParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
	Type          int32  `json:"type"`
	Amount        int64  `json:"amount"`
}

func (q *Queries) UpsertAsset(ctx context.Context, arg UpsertAssetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertAsset,
		arg.AccountUserID,
		arg.EnumID,
		arg.Type,
		arg.Amount,
		arg.Amount,
	)
}

const upsertAssetLimitMax = `-- name: UpsertAssetLimitMax :execresult
INSERT INTO asset (account_user_id, enum_id, type, balance) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE balance = IF(balance >= ?, balance, IF(balance + ? >= ?, ?, balance + ?))
`

type UpsertAssetLimitMaxParams struct {
	AccountUserID int32  `json:"account_user_id"`
	EnumID        string `json:"enum_id"`
	Type          int32  `json:"type"`
	Amount        int64  `json:"amount"`
	MaxAmount     int64  `json:"max_amount"`
}

func (q *Queries) UpsertAssetLimitMax(ctx context.Context, arg UpsertAssetLimitMaxParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, upsertAssetLimitMax,
		arg.AccountUserID,
		arg.EnumID,
		arg.Type,
		arg.Amount,
		arg.MaxAmount,
		arg.Amount,
		arg.MaxAmount,
		arg.MaxAmount,
		arg.Amount,
	)
}

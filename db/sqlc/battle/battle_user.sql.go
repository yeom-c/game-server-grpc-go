// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: battle_user.sql

package db_battle

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (` + "`" + `account_user_id` + "`" + `) VALUES (?)
`

func (q *Queries) CreateUser(ctx context.Context, accountUserID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, accountUserID)
}

const getRankerList = `-- name: GetRankerList :many
SELECT id, account_user_id, match_point, match_win, match_lose, created_at FROM ` + "`" + `user` + "`" + ` WHERE match_point > 0 ORDER BY match_point DESC, id ASC LIMIT ?, ?
`

type GetRankerListParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) GetRankerList(ctx context.Context, arg GetRankerListParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getRankerList, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.MatchPoint,
			&i.MatchWin,
			&i.MatchLose,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByAccountUserId = `-- name: GetUserByAccountUserId :one
SELECT id, account_user_id, match_point, match_win, match_lose, created_at FROM ` + "`" + `user` + "`" + ` WHERE account_user_id = ? LIMIT 1
`

func (q *Queries) GetUserByAccountUserId(ctx context.Context, accountUserID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAccountUserId, accountUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.MatchPoint,
		&i.MatchWin,
		&i.MatchLose,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserMatchResultByAccountUserId = `-- name: UpdateUserMatchResultByAccountUserId :execresult
UPDATE ` + "`" + `user` + "`" + ` SET match_point = match_point + ?, match_win = match_win + ?, match_lose = match_lose + ? WHERE account_user_id = ?
`

type UpdateUserMatchResultByAccountUserIdParams struct {
	AddMatchPoint int32 `json:"add_match_point"`
	AddMatchWin   int32 `json:"add_match_win"`
	AddMatchLose  int32 `json:"add_match_lose"`
	AccountUserID int32 `json:"account_user_id"`
}

func (q *Queries) UpdateUserMatchResultByAccountUserId(ctx context.Context, arg UpdateUserMatchResultByAccountUserIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUserMatchResultByAccountUserId,
		arg.AddMatchPoint,
		arg.AddMatchWin,
		arg.AddMatchLose,
		arg.AccountUserID,
	)
}

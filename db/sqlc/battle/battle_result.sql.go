// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: battle_result.sql

package db_battle

import (
	"context"
	"database/sql"
	"time"
)

const createBattleResult = `-- name: CreateBattleResult :execresult
INSERT INTO battle_result (account_user_id, match_account_user_id, channel_id, deck_id, battle_start_at) VALUES (?, ?, ?, ?, ?)
`

type CreateBattleResultParams struct {
	AccountUserID      int32     `json:"account_user_id"`
	MatchAccountUserID int32     `json:"match_account_user_id"`
	ChannelID          string    `json:"channel_id"`
	DeckID             int32     `json:"deck_id"`
	BattleStartAt      time.Time `json:"battle_start_at"`
}

func (q *Queries) CreateBattleResult(ctx context.Context, arg CreateBattleResultParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBattleResult,
		arg.AccountUserID,
		arg.MatchAccountUserID,
		arg.ChannelID,
		arg.DeckID,
		arg.BattleStartAt,
	)
}

const getBattleResultByChannelId = `-- name: GetBattleResultByChannelId :one
SELECT id, account_user_id, match_account_user_id, channel_id, deck_id, result, battle_start_at, confirmed_at, created_at FROM battle_result WHERE account_user_id = ? AND channel_id = ?
`

type GetBattleResultByChannelIdParams struct {
	AccountUserID int32  `json:"account_user_id"`
	ChannelID     string `json:"channel_id"`
}

func (q *Queries) GetBattleResultByChannelId(ctx context.Context, arg GetBattleResultByChannelIdParams) (BattleResult, error) {
	row := q.db.QueryRowContext(ctx, getBattleResultByChannelId, arg.AccountUserID, arg.ChannelID)
	var i BattleResult
	err := row.Scan(
		&i.ID,
		&i.AccountUserID,
		&i.MatchAccountUserID,
		&i.ChannelID,
		&i.DeckID,
		&i.Result,
		&i.BattleStartAt,
		&i.ConfirmedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUnconfirmedBattleResults = `-- name: GetUnconfirmedBattleResults :many
SELECT id, account_user_id, match_account_user_id, channel_id, deck_id, result, battle_start_at, confirmed_at, created_at FROM battle_result WHERE account_user_id = ? AND confirmed_at IS NULL
`

func (q *Queries) GetUnconfirmedBattleResults(ctx context.Context, accountUserID int32) ([]BattleResult, error) {
	rows, err := q.db.QueryContext(ctx, getUnconfirmedBattleResults, accountUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BattleResult{}
	for rows.Next() {
		var i BattleResult
		if err := rows.Scan(
			&i.ID,
			&i.AccountUserID,
			&i.MatchAccountUserID,
			&i.ChannelID,
			&i.DeckID,
			&i.Result,
			&i.BattleStartAt,
			&i.ConfirmedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBattleResultConfirmedAt = `-- name: UpdateBattleResultConfirmedAt :execresult
UPDATE battle_result SET confirmed_at = ? WHERE id = ?
`

type UpdateBattleResultConfirmedAtParams struct {
	ConfirmedAt sql.NullTime `json:"confirmed_at"`
	ID          int32        `json:"id"`
}

func (q *Queries) UpdateBattleResultConfirmedAt(ctx context.Context, arg UpdateBattleResultConfirmedAtParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateBattleResultConfirmedAt, arg.ConfirmedAt, arg.ID)
}

const updateBattleResultResultByChannelId = `-- name: UpdateBattleResultResultByChannelId :execresult
UPDATE battle_result SET result = ? WHERE account_user_id = ? AND channel_id = ?
`

type UpdateBattleResultResultByChannelIdParams struct {
	Result        int32  `json:"result"`
	AccountUserID int32  `json:"account_user_id"`
	ChannelID     string `json:"channel_id"`
}

func (q *Queries) UpdateBattleResultResultByChannelId(ctx context.Context, arg UpdateBattleResultResultByChannelIdParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateBattleResultResultByChannelId, arg.Result, arg.AccountUserID, arg.ChannelID)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: sharding.sql

package db_common

import (
	"context"
	"database/sql"
)

const getGameDb = `-- name: GetGameDb :one
SELECT id, game_db, count FROM sharding ORDER BY ` + "`" + `count` + "`" + ` ASC LIMIT 1
`

func (q *Queries) GetGameDb(ctx context.Context) (Sharding, error) {
	row := q.db.QueryRowContext(ctx, getGameDb)
	var i Sharding
	err := row.Scan(&i.ID, &i.GameDb, &i.Count)
	return i, err
}

const getShardings = `-- name: GetShardings :many
SELECT id, game_db, count FROM sharding
`

func (q *Queries) GetShardings(ctx context.Context) ([]Sharding, error) {
	rows, err := q.db.QueryContext(ctx, getShardings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sharding{}
	for rows.Next() {
		var i Sharding
		if err := rows.Scan(&i.ID, &i.GameDb, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShardingCountByGameDb = `-- name: UpdateShardingCountByGameDb :execresult
UPDATE sharding SET ` + "`" + `count` + "`" + ` = ` + "`" + `count` + "`" + ` + ? WHERE game_db = ?
`

type UpdateShardingCountByGameDbParams struct {
	Count  int32 `json:"count"`
	GameDb int32 `json:"game_db"`
}

func (q *Queries) UpdateShardingCountByGameDb(ctx context.Context, arg UpdateShardingCountByGameDbParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateShardingCountByGameDb, arg.Count, arg.GameDb)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: account_user.sql

package db_common

import (
	"context"
	"database/sql"
	"time"
)

const createAccountUser = `-- name: CreateAccountUser :execresult
INSERT INTO account_user (account_id, game_db, nickname) VALUES (?, ?, ?)
`

type CreateAccountUserParams struct {
	AccountID int32  `json:"account_id"`
	GameDb    int32  `json:"game_db"`
	Nickname  string `json:"nickname"`
}

func (q *Queries) CreateAccountUser(ctx context.Context, arg CreateAccountUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccountUser, arg.AccountID, arg.GameDb, arg.Nickname)
}

const getAccountUser = `-- name: GetAccountUser :one
SELECT id, account_id, game_db, nickname, signed_in_at, created_at FROM account_user WHERE id = ?
`

func (q *Queries) GetAccountUser(ctx context.Context, id int32) (AccountUser, error) {
	row := q.db.QueryRowContext(ctx, getAccountUser, id)
	var i AccountUser
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.GameDb,
		&i.Nickname,
		&i.SignedInAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountUserByAccountId = `-- name: GetAccountUserByAccountId :one
SELECT id, account_id, game_db, nickname, signed_in_at, created_at FROM account_user WHERE account_id = ? limit 1
`

func (q *Queries) GetAccountUserByAccountId(ctx context.Context, accountID int32) (AccountUser, error) {
	row := q.db.QueryRowContext(ctx, getAccountUserByAccountId, accountID)
	var i AccountUser
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.GameDb,
		&i.Nickname,
		&i.SignedInAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountUserByNickname = `-- name: GetAccountUserByNickname :one
SELECT id, account_id, game_db, nickname, signed_in_at, created_at FROM account_user WHERE nickname = ? limit 1
`

func (q *Queries) GetAccountUserByNickname(ctx context.Context, nickname string) (AccountUser, error) {
	row := q.db.QueryRowContext(ctx, getAccountUserByNickname, nickname)
	var i AccountUser
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.GameDb,
		&i.Nickname,
		&i.SignedInAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountUserSignedIn = `-- name: UpdateAccountUserSignedIn :execresult
UPDATE account_user SET signed_in_at = ? WHERE id = ?
`

type UpdateAccountUserSignedInParams struct {
	SignedInAt time.Time `json:"signed_in_at"`
	ID         int32     `json:"id"`
}

func (q *Queries) UpdateAccountUserSignedIn(ctx context.Context, arg UpdateAccountUserSignedInParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccountUserSignedIn, arg.SignedInAt, arg.ID)
}
